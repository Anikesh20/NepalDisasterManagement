import { Ionicons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
import { LinearGradient } from 'expo-linear-gradient';
import * as Location from 'expo-location';
import { useRouter } from 'expo-router';
import { useEffect, useState } from 'react';
import { ActivityIndicator, Alert, Dimensions, Image, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import Animated, { FadeInDown } from 'react-native-reanimated';
import DisasterCard from '../components/DisasterCard';
import WeatherModal from '../components/WeatherModal';
import { DisasterData } from '../services/disasterService';
import disasterService from '../services/disasterService';
import { colors, shadows } from '../styles/theme';

const { width } = Dimensions.get('window');

export default function DashboardScreen() {
  const router = useRouter();
  const [profileImage, setProfileImage] = useState<string | null>(null);
  const [weatherModalVisible, setWeatherModalVisible] = useState(false);
  const [userLocation, setUserLocation] = useState<{ latitude: number; longitude: number } | null>(null);
  const [locationPermission, setLocationPermission] = useState<boolean | null>(null);
  const [activeDisasters, setActiveDisasters] = useState<DisasterData[]>([]);
  const [loadingDisasters, setLoadingDisasters] = useState(true);
  const [disasterError, setDisasterError] = useState<string | null>(null);

  const requestLocationPermission = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      setLocationPermission(status === 'granted');
      
      if (status === 'granted') {
        const location = await Location.getCurrentPositionAsync({});
        setUserLocation({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
        });
      } else {
        Alert.alert(
          'Location Permission Required',
          'Please enable location access in your device settings to get weather information for your area.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('Error getting location:', error);
      Alert.alert('Error', 'Failed to get your location. Please try again.');
    }
  };

  useEffect(() => {
    requestLocationPermission();
    
    // Fetch active disasters
    const fetchDisasters = async () => {
      try {
        setLoadingDisasters(true);
        setDisasterError(null);
        const disasters = await disasterService.getActiveDisasters();
        setActiveDisasters(disasters);
      } catch (error: any) {
        console.error('Error fetching disasters:', error);
        setDisasterError(error.message || 'Failed to fetch disaster data');
      } finally {
        setLoadingDisasters(false);
      }
    };
    
    fetchDisasters();
  }, []);

  const handleWeatherPress = () => {
    if (locationPermission === false) {
      Alert.alert(
        'Location Permission Required',
        'Please enable location access in your device settings to get weather information for your area.',
        [{ text: 'OK' }]
      );
    } else {
      setWeatherModalVisible(true);
    }
  };

  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      setProfileImage(result.assets[0].uri);
    }
  };

  const quickActions = [
    {
      title: 'Emergency Contacts',
      icon: 'call-outline' as const,
      color: '#FF5A5F',
      onPress: () => router.push('/(dashboard)/emergency-contacts'),
    },
    {
      title: 'Volunteer Status',
      icon: 'people-outline' as const,
      color: '#3498DB',
      onPress: () => router.push('/(dashboard)/volunteer-status'),
    },
    {
      title: 'Disaster Alerts',
      icon: 'alert-outline' as const,
      color: '#F39C12',
      onPress: () => router.push('/(dashboard)/alerts'),
    },
    {
      title: 'Weather',
      icon: 'partly-sunny-outline' as const,
      color: '#2ECC71',
      onPress: handleWeatherPress,
    },
  ];

  const stats = [
    { label: 'Preparedness Score', value: '85%', icon: 'shield-checkmark-outline' as const, color: '#4CAF50' },
    { label: 'Nearby Shelters', value: '3', icon: 'home-outline' as const, color: '#2196F3' },
    { label: 'Active Volunteers', value: '12', icon: 'people-outline' as const, color: '#FF9800' },
  ];

  const newsItems = [
    {
      title: 'Earthquake Preparedness Workshop',
      date: '2 hours ago',
      source: 'NDRRMA',
      icon: 'newspaper-outline' as const,
    },
    {
      title: 'New Emergency Shelters Added',
      date: '5 hours ago',
      source: 'Local News',
      icon: 'home-outline' as const,
    },
  ];

  // Render disaster cards section
  const renderDisastersSection = () => {
    if (loadingDisasters) {
      return (
        <View style={styles.disasterLoadingContainer}>
          <ActivityIndicator size="small" color={colors.primary} />
          <Text style={styles.disasterLoadingText}>Loading disaster information...</Text>
        </View>
      );
    }

    if (disasterError) {
      return (
        <View style={styles.disasterErrorContainer}>
          <Ionicons name="alert-circle-outline" size={24} color={colors.danger} />
          <Text style={styles.disasterErrorText}>{disasterError}</Text>
        </View>
      );
    }

    if (activeDisasters.length === 0) {
      return (
        <View style={styles.noDisastersContainer}>
          <Ionicons name="checkmark-circle-outline" size={24} color={colors.success} />
          <Text style={styles.noDisastersText}>No active disasters in your area</Text>
        </View>
      );
    }

    return (
      <ScrollView
        horizontal
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.disasterCardsContainer}
      >
        {activeDisasters.map((disaster, index) => (
          <Animated.View
            key={disaster.id}
            entering={FadeInDown.delay(index * 100)}
          >
            <DisasterCard disaster={disaster} compact />
          </Animated.View>
        ))}
      </ScrollView>
    );
  };

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <LinearGradient
        colors={[colors.primary, colors.primaryDark]}
        style={styles.header}
      >
        <View style={styles.headerContent}>
          <View style={styles.headerTop}>
            <View>
              <Text style={styles.welcomeText}>Welcome back!</Text>
              <Text style={styles.subtitle}>Stay safe, stay prepared</Text>
            </View>
            <TouchableOpacity 
              style={styles.profileButton}
              onPress={() => router.push('/(dashboard)/profile')}
            >
              {profileImage ? (
                <Image source={{ uri: profileImage }} style={styles.profileButtonImage} />
              ) : (
                <View style={styles.profileButtonPlaceholder}>
                  <Ionicons name="person-circle-outline" size={32} color="#fff" />
                </View>
              )}
            </TouchableOpacity>
          </View>
        </View>
      </LinearGradient>

      <View style={styles.content}>
        <View style={styles.quickActionsContainer}>
          {quickActions.map((action, index) => (
            <Animated.View
              key={index}
              entering={FadeInDown.delay(index * 100)}
            >
              <TouchableOpacity
                style={[styles.actionCard, { backgroundColor: action.color + '15' }]}
                onPress={action.onPress}
              >
                <View style={[styles.actionIconContainer, { backgroundColor: action.color + '30' }]}>
                  <Ionicons name={action.icon} size={24} color={action.color} />
                </View>
                <Text style={[styles.actionText, { color: action.color }]}>{action.title}</Text>
              </TouchableOpacity>
            </Animated.View>
          ))}
        </View>

        <View style={styles.disastersSection}>
          <View style={styles.sectionTitleContainer}>
            <Text style={styles.sectionTitle}>Active Disasters</Text>
            <TouchableOpacity onPress={() => router.push('/(dashboard)/alerts')}>
              <Text style={styles.seeAllText}>See All</Text>
            </TouchableOpacity>
          </View>
          {renderDisastersSection()}
        </View>

        <View style={styles.statsSection}>
          <Text style={styles.sectionTitle}>Your Status</Text>
          <View style={styles.statsContainer}>
            {stats.map((stat, index) => (
              <Animated.View
                key={index}
                entering={FadeInDown.delay(400 + index * 100)}
                style={styles.statCard}
              >
                <View style={[styles.statIconContainer, { backgroundColor: stat.color + '20' }]}>
                  <Ionicons name={stat.icon} size={24} color={stat.color} />
                </View>
                <Text style={styles.statValue}>{stat.value}</Text>
                <Text style={styles.statLabel}>{stat.label}</Text>
              </Animated.View>
            ))}
          </View>
        </View>

        <View style={styles.newsSection}>
          <Text style={styles.sectionTitle}>Latest Updates</Text>
          {newsItems.map((item, index) => (
            <Animated.View
              key={index}
              entering={FadeInDown.delay(700 + index * 100)}
            >
              <TouchableOpacity style={styles.newsCard}>
                <View style={styles.newsIconContainer}>
                  <Ionicons name={item.icon} size={24} color={colors.primary} />
                </View>
                <View style={styles.newsContent}>
                  <Text style={styles.newsTitle}>{item.title}</Text>
                  <View style={styles.newsMeta}>
                    <Text style={styles.newsSource}>{item.source}</Text>
                    <Text style={styles.newsDate}>{item.date}</Text>
                  </View>
                </View>
                <Ionicons name="chevron-forward" size={20} color={colors.textLight} />
              </TouchableOpacity>
            </Animated.View>
          ))}
        </View>

        <View style={styles.mapSection}>
          <Text style={styles.sectionTitle}>Nearby Resources</Text>
          <TouchableOpacity style={styles.mapCard}>
            <Image
              source={require('../../assets/images/splash-icon.png')}
              style={styles.mapImage}
              resizeMode="cover"
            />
            <LinearGradient
              colors={['transparent', 'rgba(0,0,0,0.8)']}
              style={styles.mapOverlay}
            >
              <View style={styles.mapContent}>
                <Text style={styles.mapText}>View Nearby Shelters & Resources</Text>
                <Ionicons name="map-outline" size={24} color="#fff" />
              </View>
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </View>

      <WeatherModal
        visible={weatherModalVisible}
        onClose={() => setWeatherModalVisible(false)}
        userLocation={userLocation || undefined}
        onRequestPermission={requestLocationPermission}
        hasPermission={locationPermission}
      />
    </ScrollView>
  );
}
